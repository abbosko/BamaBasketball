[{"C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\index.js":"1","C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\reportWebVitals.js":"2","C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\App.js":"3","C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\apiFunctions.js":"4","C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\genToken.js":"5"},{"size":1490,"mtime":1697154226199,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1697154226216,"results":"8","hashOfConfig":"7"},{"size":621,"mtime":1697154226199,"results":"9","hashOfConfig":"7"},{"size":5182,"mtime":1697154226199,"results":"10","hashOfConfig":"7"},{"size":600,"mtime":1697154226199,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"ixoi6d",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29"},"C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\index.js",["30","31","32"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getDatabase, ref } from \"firebase/database\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC40QoEGRFW3odhHDrk5tYTsO0X4mFyJXQ\",\r\n  authDomain: \"uambb-2def3.firebaseapp.com\",\r\n  projectId: \"uambb-2def3\",\r\n  storageBucket: \"uambb-2def3.appspot.com\",\r\n  messagingSenderId: \"210177408912\",\r\n  appId: \"1:210177408912:web:b608c7e17caa478eb27d15\",\r\n  measurementId: \"G-EYZBG3EE9B\",\r\n  databaseURL: \"https://uambb-2def3-default-rtdb.firebaseio.com\",\r\n};\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nconst database = getDatabase(app);\r\n","C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\reportWebVitals.js",[],[],"C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\App.js",[],[],"C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\apiFunctions.js",["33","34","35"],[],"require('dotenv').config({path:\"./.env\"}); \r\nconst token = require('./genToken.js');\r\n\r\n\r\n// !!!!!!! MOVE LATER !!!!!!!!\r\n// Firstbeat athlete object\r\nfunction FBAthlete(fname, lname, email, id) {\r\n    this.fname = fname;\r\n    this.lname = lname;\r\n    this.email = email;\r\n    this.id = id;\r\n}\r\n\r\n/*const apiHawkinsTest = () => {\r\n    fetch(process.env.HAWKINS_URL, {\r\n        headers: {\r\n            Authorization: \"bearer ${process.env.HAWKINS_API_KEY}\"\r\n            //X-AUTH-TOKEN': process.env.HAWKINS_API_KEY\r\n        }\r\n    }) \r\n    .then(response => { \r\n        if (response.ok) { \r\n        return response.text(); // Parse the response data as JSON \r\n        //return response;\r\n        } else { \r\n        throw new Error('API request failed'); \r\n        } \r\n    }) \r\n    .then(data => { \r\n        // Process the response data here \r\n        console.log(data); // Example: Logging the data to the console \r\n    }) \r\n    .catch(error => { \r\n        // Handle any errors here \r\n        console.error(error); // Example: Logging the error to the console \r\n    });\r\n}\r\n\r\napiHawkinsTest();*/\r\n\r\n/*const apiKinexonTest = () => {\r\n    fetch(process.env.KINEXON_URL, {\r\n        headers: {\r\n            //Authorization: 'Bearer ${process.env.KINEXON_API_KEY}'\r\n            'X-AUTH-TOKEN': process.env.KINEXON_API_KEY\r\n        }\r\n    }) \r\n    .then(response => { \r\n        if (response.ok) { \r\n        return response.text(); // Parse the response data as JSON \r\n        //return response;\r\n        } else { \r\n        throw new Error('API request failed'); \r\n        } \r\n    }) \r\n    .then(data => { \r\n        // Process the response data here \r\n        console.log(data); // Example: Logging the data to the console \r\n    }) \r\n    .catch(error => { \r\n        // Handle any errors here \r\n        console.error(error); // Example: Logging the error to the console \r\n    });\r\n}\r\n\r\napiKinexonTest();*/\r\n\r\n\r\n\r\n/*\r\n* Firstbeat API calls! :)\r\n*/\r\nlet fbAuth = 'Bearer ' + token.genFbToken();                // generates authorization token\r\nconst teamId = 17688;                                       // UAMBB team id\r\nvar fbAthleteArray = [];\r\n\r\n// gets athlete info, creates instance of 'FBAthlete', stores in fbAthleteArray\r\nconst apiFirstBeatAthletes = () => {\r\n    fetch((process.env.FIRSTBEAT_URL).concat('/athletes'), { // add {accountId}/athletes to url\r\n        headers: {\r\n            Authorization: fbAuth,\r\n            \"X-Api-Key\": process.env.FIRSTBEAT_API_KEY\r\n        }\r\n    }) \r\n    .then(response => { \r\n        if (response.ok) { \r\n            return response.json();\r\n        } else { \r\n            throw new Error('API request failed'); \r\n        } \r\n    }) \r\n    .then(data => {      \r\n        for(let i = 0; i < data.athletes.length; i++) {     // create FBAthlete & push onto fbAthleteArray\r\n            fbAthleteArray.push(new FBAthlete(data.athletes[i].firstName, data.athletes[i].lastName, data.athletes[i].email, data.athletes[i].athleteId));\r\n        }\r\n    }) \r\n    .catch(error => { \r\n        console.error(error);\r\n    });\r\n}\r\n\r\n// did this to get team id, do we need groups??\r\nconst apiFirstBeatTeam = () => {\r\n    fetch((process.env.FIRSTBEAT_URL).concat('/teams'), {  // add team to url\r\n        headers: {\r\n            Authorization: fbAuth,\r\n            \"X-Api-Key\": process.env.FIRSTBEAT_API_KEY\r\n        }\r\n    }) \r\n    .then(response => { \r\n        if (response.ok) { \r\n            return response.json();\r\n        } else { \r\n            throw new Error('API request failed'); \r\n        } \r\n    }) \r\n    .then(data => {\r\n        for(let i = 0; i < 3; i++) {\r\n           console.log(data.teams[0].groups[i]);\r\n        }      \r\n    }) \r\n    .catch(error => { \r\n        console.error(error);\r\n    });\r\n}\r\n\r\n//gets sessions going back to June 1st, 2022; store this data somewhere\r\nconst apiFirstBeatSessions = () => {\r\n    fetch((process.env.FIRSTBEAT_URL).concat('/teams/', teamId, '/sessions'), {  // add teams/{teamId}/sessions to url\r\n        headers: {\r\n            Authorization: fbAuth,\r\n            \"X-Api-Key\": process.env.FIRSTBEAT_API_KEY\r\n        }\r\n    }) \r\n    .then(response => { \r\n        if (response.ok) { \r\n            return response.json();\r\n        } else { \r\n            throw new Error('API request failed'); \r\n        } \r\n    }) \r\n    .then(data => {\r\n        console.log(data);     \r\n    }) \r\n    .catch(error => { \r\n        console.error(error);\r\n    });\r\n}\r\n\r\n// results for indiv session, session # for June 1st, 2022 is hard coded rn for an example\r\nconst apiFirstBeatSessionResults = () => {\r\n    fetch((process.env.FIRSTBEAT_URL).concat('/teams/', teamId, '/sessions/575554/results'), {  // add teams/{teamId}/sessions/{sessionId}/results to url\r\n        headers: {\r\n            Authorization: fbAuth,\r\n            \"X-Api-Key\": process.env.FIRSTBEAT_API_KEY\r\n        }\r\n    }) \r\n    .then(response => { \r\n        if (response.ok) { \r\n            return response.json;\r\n        } else { \r\n            throw new Error('API request failed'); \r\n        } \r\n    }) \r\n    .then(data => {\r\n        console.log(data);     \r\n    }) \r\n    .catch(error => { \r\n        console.error(error);\r\n    });\r\n}\r\n\r\napiFirstBeatSessionResults();","C:\\CS495\\BamaBasketball-2\\UAMBB\\my-app\\src\\genToken.js",["36"],[],"'use strict';\r\nrequire('dotenv').config({path:\"./.env\"}); \r\n\r\n//npm install jsonwebtoken\r\nmodule.exports = {\r\n    genFbToken: function() {                    // FIRSTBEAT TOKEN\r\n        const jwt = require('jsonwebtoken');\r\n        const SECRET = process.env.FIRSTBEAT_SHARED_SECRET;\r\n        const issuedAt = Date.now() / 1000;\r\n        const payload = {\r\n        iss: process.env.FIRSTBEAT_CONSUMERID,\r\n        iat: issuedAt,\r\n        exp: issuedAt + 300\r\n        };\r\n\r\n        // default algorithm (HMAC SHA256)\r\n\r\n        const token = jwt.sign(payload, SECRET); \r\n        return token;\r\n    }\r\n}",{"ruleId":"37","severity":1,"message":"38","line":8,"column":23,"nodeType":"39","messageId":"40","endLine":8,"endColumn":26},{"ruleId":"37","severity":1,"message":"41","line":39,"column":7,"nodeType":"39","messageId":"40","endLine":39,"endColumn":16},{"ruleId":"37","severity":1,"message":"42","line":40,"column":7,"nodeType":"39","messageId":"40","endLine":40,"endColumn":15},{"ruleId":"37","severity":1,"message":"43","line":78,"column":7,"nodeType":"39","messageId":"40","endLine":78,"endColumn":27},{"ruleId":"37","severity":1,"message":"44","line":103,"column":7,"nodeType":"39","messageId":"40","endLine":103,"endColumn":23},{"ruleId":"37","severity":1,"message":"45","line":128,"column":7,"nodeType":"39","messageId":"40","endLine":128,"endColumn":27},{"ruleId":"46","severity":1,"message":"47","line":1,"column":1,"nodeType":"48","messageId":"49","endLine":1,"endColumn":14,"fix":"50"},"no-unused-vars","'ref' is defined but never used.","Identifier","unusedVar","'analytics' is assigned a value but never used.","'database' is assigned a value but never used.","'apiFirstBeatAthletes' is assigned a value but never used.","'apiFirstBeatTeam' is assigned a value but never used.","'apiFirstBeatSessions' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"51","text":"52"},[0,13],""]